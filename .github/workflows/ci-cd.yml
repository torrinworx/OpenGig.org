name: CI/CD Pipeline

on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Execute build script
              run: |
                  chmod +x ./build.sh
                  ./build.sh

            - name: Ensure build output exists
              run: ls ./

            - name: Upload Build Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifact
                  path: ./build.zip

    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Download Build Artifact
              uses: actions/download-artifact@v4
              with:
                  name: build-artifact

            - name: Verify downloaded artifact
              run: ls ./

            - name: Install doctl
              run: |
                  sudo snap install doctl

            - name: Authenticate to DigitalOcean
              env:
                  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
              run: |
                  doctl auth init -t $DIGITALOCEAN_ACCESS_TOKEN

            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_KEY }}

            - name: Verify file operations
              run: |
                  echo "Current directory structure:"
                  ls -l ./
                  file ./build.zip
                  file /home/www/deploying/build.zip

            - name: Deploy application
              env:
                  DROPLET_ID: ${{ secrets.DROPLET_ID }}
              run: |
                  PUBLIC_IP=$(doctl compute droplet get $DROPLET_ID --format PublicIPv4 --no-header)
                  mkdir -p /home/www/deploying
                  chmod -R 755 /home/www/deploying

                  # Use scp outside of the SSH session
                  scp -o 'StrictHostKeyChecking=no' ./build.zip www@$PUBLIC_IP:/home/www/deploying/build.zip

                  # Perform the remaining operations inside the SSH session
                  ssh -o "StrictHostKeyChecking=no" www@$PUBLIC_IP "
                      # Create and set permissions for deployment directory

                      unzip -o -qq /home/www/deploying/build.zip -d /home/www/deploying

                      # Backup the .env file
                      [ -f /home/www/build/.env ] && cp /home/www/build/.env /home/www/.env_backup

                      # Reload the user daemon
                      systemctl --user daemon-reload

                      # Move the build files
                      mv /home/www/deploying/build /home/www/build.new
                      rm -r /home/www/deploying
                      cd /home/www/build.new/

                      # Install dependencies
                      npm install

                      # Change run script permissions
                      chmod +x /home/www/build/run.sh

                      # Swap builds atomically
                      systemctl --user stop opengig || echo 'Service not running'
                      rm -rf /home/www/build.old
                      mv /home/www/build /home/www/build.old
                      mv /home/www/build.new /home/www/build

                      # Restore the .env file
                      [ -f /home/www/.env_backup ] && mv /home/www/.env_backup /home/www/build/.env

                      # Enable and start the service
                      systemctl --user enable --now opengig
                  "
