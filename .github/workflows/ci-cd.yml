name: CI/CD Pipeline

on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Execute build script
              run: |
                  chmod +x ./build.sh
                  ./build.sh

            - name: Ensure build output exists
              run: ls ./

            - name: Upload Build Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifact
                  path: ./build.zip

    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Download Build Artifact
              uses: actions/download-artifact@v4
              with:
                  name: build-artifact

            - name: Verify downloaded artifact
              run: ls ./

            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_KEY }}

            - name: Verify file operations
              run: |
                  echo "Current directory structure:"
                  ls -l ./
                  file ./build.zip
                  file /home/www/deploying/build.zip

            - name: Deploy application
              env:
                  PUBLIC_IP: ${{ secrets.PUBLIC_IP }}
              run: |
                  scp -o 'StrictHostKeyChecking=no' ./build.zip www@$PUBLIC_IP:/home/www/build.zip
                  ssh -o "StrictHostKeyChecking=no" www@$PUBLIC_IP "
                      # Ensure DBus and XDG environment variables are set for the user
                      export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
                      export XDG_RUNTIME_DIR=/run/user/$(id -u)
                      
                      # Make sure DBus is initialized
                      dbus-launch --sh-syntax --exit-with-session

                      # Create necessary directories
                      mkdir /home/www/deploying
                      unzip -o -qq /home/www/build.zip -d /home/www/deploying
                      rm -r /home/www/build.zip

                      # Reload systemd
                      sudo systemctl daemon-reload

                      # Move to new build directory and install dependencies
                      mv /home/www/deploying/build /home/www/build.new
                      rm -r /home/www/deploying
                      cd /home/www/build.new/

                      npm install

                      # Stop opengig service with absolute paths
                      sudo -u www systemctl stop opengig || echo 'skipped stop opengig'

                      rm -r /home/www/build.old | true
                      mv /home/www/build /home/www/build.old
                      mv /home/www/build.new /home/www/build

                      chmod +x /home/www/build/run.sh
                      sudo -u www systemctl enable --now opengig
                      "
